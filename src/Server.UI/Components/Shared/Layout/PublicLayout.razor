@using Microsoft.AspNetCore.Antiforgery
@layout MainLayout
@inherits LayoutComponentBase
@inject LayoutService LayoutService
@inject IAntiforgery _antiforgery;
@inject IHttpContextAccessor _httpContextAccessor;
@inject IStringLocalizer<SharedResource> L
@inject IDialogService sialogService
<MudLayout>
    <MudAppBar Elevation="0" Class="align-items-center text-center"
               Style="background: white; padding-top:20px; padding-bottom:20px">

        <!-- Top Center Image -->
        <MudImage Fluid="true" Src="img/sos-logo.png"
                  Alt="Swedish Farm House"
                  Class="rounded-lg responsive-image mb-3"
                  Style="max-height:100px; object-fit:contain;" />

        <!-- Navigation Buttons -->
        <div class="nav-buttons">
            <MudTooltip Arrow="true" Text="Home">
                <MudButton Variant="Variant.Text" OnClick="@(()=>Navigation.NavigateTo(Login.PageUrl,true))"
                           StartIcon="@Icons.Material.Rounded.Home"
                           Style="text-transform:none">
                    Home
                </MudButton>
            </MudTooltip>

            <MudTooltip Arrow="true" Text="Admission Circular">
                <MudButton Variant="Variant.Text" OnClick="@(async ()=> await ShowPdfDialog("/docs/doc.pdf", "Admission Circular"))"
                           StartIcon="@Icons.Material.Rounded.Newspaper"
                           Style="text-transform:none">
                    Admission Circular
                </MudButton>
            </MudTooltip>

            <MudTooltip Text="Instruction">
                <MudButton Variant="Variant.Text" OnClick="@(async ()=> await ShowPdfDialog("/docs/doc.pdf", "Document"))"
                           StartIcon="@Icons.Material.Rounded.Help"
                           Style="text-transform:none">
                    Instruction
                </MudButton>
            </MudTooltip>

            <AuthorizeView>
                <Authorized>
                    <form action="@IdentityComponentsEndpointRouteBuilderExtensions.Logout" method="post" class="m-0">
                        <input type="hidden" name="__RequestVerificationToken" value="@antiforgeryToken" />
                        <input type="hidden" name="ReturnUrl" value="/" />
                        <MudTooltip Text="@L["Logout"]">
                            <MudButton Style="text-transform:none"
                                       ButtonType="ButtonType.Submit"
                                       Variant="Variant.Text"
                                       StartIcon="@Icons.Material.Filled.Logout">
                                @L["Logout"]
                            </MudButton>
                        </MudTooltip>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <MudTooltip Text="@L["Login"]">
                        <MudButton Variant="Variant.Text" OnClick="@(()=>Navigation.NavigateTo(Login.PageUrl,true))"
                                   StartIcon="@Icons.Material.Rounded.Login"
                                   Style="text-transform:none">
                            @L["Login"]
                        </MudButton>
                    </MudTooltip>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mb-4 mt-4" Style="height:fit-content">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code
{
	private string? antiforgeryToken;
	protected override void OnInitialized()
	{
		antiforgeryToken = getAntiforgeryToken();
	}
	private string? getAntiforgeryToken()
	{
		var httpContext = _httpContextAccessor.HttpContext;
		if (httpContext == null)
		{
			throw new InvalidOperationException("HttpContext is not available.");
		}
		var tokens = _antiforgery.GetAndStoreTokens(httpContext);
		return tokens.RequestToken;
	}

	private async Task ShowPdfDialog(string src, string title)
	{
		var dialogOptions = new DialogOptions
			{
				CloseButton = true,
				MaxWidth = MaxWidth.Large,
				FullWidth = true
			};

		var dialogParameters = new DialogParameters<PdfViewerDialog>
		{
			{x => x.Src, src},
			{x => x.Title, title}
		};

		await DialogService.ShowAsync<PdfViewerDialog>(title, dialogParameters, dialogOptions);
	}
}