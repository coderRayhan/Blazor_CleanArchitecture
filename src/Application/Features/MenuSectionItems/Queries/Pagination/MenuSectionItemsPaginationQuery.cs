//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-12-09
//     Last Modified: 2024-12-09
//     Description: 
//       Defines a query for retrieving menusectionitems with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Caching;
using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Mappers;
using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Queries.Pagination;

public class MenuSectionItemsWithPaginationQuery : MenuSectionItemAdvancedFilter, IRequest<PaginatedData<MenuSectionItemDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => MenuSectionItemCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => MenuSectionItemCacheKey.Tags;
    public MenuSectionItemAdvancedSpecification Specification => new MenuSectionItemAdvancedSpecification(this);
}
    
public class MenuSectionItemsWithPaginationQueryHandler :
         IRequestHandler<MenuSectionItemsWithPaginationQuery, PaginatedData<MenuSectionItemDto>>
{
        private readonly ISqlConnectionFactory _connectionFactory;

        public MenuSectionItemsWithPaginationQueryHandler(
            ISqlConnectionFactory connectionFactory)
        {
            _connectionFactory = connectionFactory;
        }

        public async Task<PaginatedData<MenuSectionItemDto>> Handle(MenuSectionItemsWithPaginationQuery request, CancellationToken cancellationToken)
        {
            var sql = $"""
                       SELECT 
                           MSI.Id,
                           MenuSectionId,
                           MSI.Title,
                           MSI.Icon,
                           MSI.Href,
                           MSI.[Target],
                           MSI.Roles,
                           MSI.PageStatus,
                           MSI.IsParent,
                           MSI.Created,
                           MSI.CreatedBy,
                           MSI.LastModified,
                           MSI.LastModifiedBy,
                           MSI.SerialNo,
                           MS.Title MenuSectionTitle
                       FROM MenuSectionItems MSI
                       INNER JOIN MenuSections MS ON MSI.MenuSectionId = MS.Id
                       """;

            var data = await PaginatedData<MenuSectionItemDto>.CreateAsync(_connectionFactory.GetOpenConnection(), sql, request);

            return data;
        }
}